
;;; Functions

(defmacro defun (sym params & body)
  `(def ~sym (lambda ~params ~@body)))

;;; read/eval/apply

(defun read (str) (.ParseForm *parser* str))
(defun eval (form) (.Evaluate *evaluator* form))
(defun apply (fun args) (.Apply *applier* fun args))

;;; Logic

(defun not (form) (if form false true))

;;; Comparison

(defun > (l r)  (not (or (< l r) (= l r))))

;;; Strings

(defun str (& strings)
  (Yalla.Evaluator.Language.StringHelpers/Str strings))

;;; Control flow

(defmacro do (& body)
  `((lambda () ~@body))) 

(defmacro when (predicate & body)
  `(if ~predicate (do ~@body)))

(defmacro unless (predicate & body)
  `(if ~predicate nil (do ~@body))) 
  
;;; IO   
         
(defun println (l)
  (when *stdout* (.WriteLine *stdout* l)))

;;; Conversions

(def int16 System.Convert/ToInt16)
(def short System.Convert/ToInt16)

(def int32 System.Convert/ToInt32)
(def int System.Convert/ToInt32)

(def int64 System.Convert/ToInt64)
(def long System.Convert/ToInt64)

(def string System.Convert/ToString)

;;; Lists

(defun list (& args) args)

(defun first (lst)
  (Yalla.Evaluator.Language.ListHelpers/First lst))

(defun rest (lst)
  (Yalla.Evaluator.Language.ListHelpers/Rest lst))

(defun empty? (lst)
  (Yalla.Evaluator.Language.ListHelpers/IsEmpty lst))

(defun second (lst)
  (first (rest lst)))

(defun of-type (type lst)
  (Yalla.Evaluator.Language.ListHelpers/OfType type lst))
  
(defun filter (lst pred)
  (Yalla.Evaluator.Language.ListHelpers/Filter lst (make-func (list System.Object System.Boolean) pred)))

(defun first-or-default (lst pred)
  (Yalla.Evaluator.Language.ListHelpers/FirstOrDefault lst (make-func (list System.Object System.Boolean) pred)))

  
(defmacro dolist (binding & body)
  `(let ((list123 ~(second binding))
         (~(first binding) (first list123)))
     (do ~@body)
     (unless (empty? (rest list123))
       (dolist (~(first binding) (rest list123)) ~@body))))

;;; (assoc 'a '(a b)) => b
;;; (assoc 'c '(a b)) => nil
;;; (assoc 'c '(a b c)) => error

(defun assoc (sym lst)
  (when (not (empty? lst))
    (let ((match (first lst))
          (res (second lst)))
      (if (= sym match)
          res
          (assoc sym (rest (rest lst)))))))
